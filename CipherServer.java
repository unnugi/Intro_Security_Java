/**********************************************\
* Course: Introduction to Security 
* Final Project
* Student: Xiaoxiao Yu
* E-mail: xiy38@pitt.edu
* Last modified: 2013/04/03
\**********************************************/

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.Key;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;

public class CipherServer {
	public static void main(String[] args) throws Exception {
		int port = 7999;
		ServerSocket server = new ServerSocket(port);

		// YOU NEED TO DO THESE STEPS:
		// -Read the key from the file generated by the client.
		FileInputStream f_in = new FileInputStream("KeyFile.dat");
		ObjectInputStream in = new ObjectInputStream(f_in);
		Key key = (Key) in.readObject();
		in.close();
		f_in.close();

		// -Use the key to decrypt the incoming message from socket s.
		// maximum length of the message is 1024 bytes
		byte byte_message[] = new byte[1024];
		byte tmp;
		int i = 0;
		Socket s = server.accept();
		Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, key);

		CipherInputStream cipher_in = new CipherInputStream(s.getInputStream(),
				cipher);
		// read stream byte by byte
		while ((tmp = (byte) cipher_in.read()) > 0) {
			byte_message[i++] = tmp;
		}

		cipher_in.close();
		s.close();

		// cut off the empty tail
		for (i = 0; i < byte_message.length; i++) {
			if (byte_message[i] == 0) {
				byte_message = Arrays.copyOf(byte_message, i);
				break;
			}
		}

		// output message bytes
		// System.out.println(Arrays.toString(byte_message));
		// output message
		String message = new String(byte_message, "UTF-8");
		System.out.println(message);
	}
}